import java.util.*;
import java.io.*;
import gr.hua.dit.compiler.*;
import gr.hua.dit.compiler.ast.*;
import gr.hua.dit.compiler.types.*;
import java_cup.runtime.Symbol;

parser code {::}

// Delimiters
terminal T_lpar, T_rpar, T_lbrace, T_rbrace, T_lbracket, T_rbracket, T_comma, T_colon, T_semicolon;

//Types
terminal T_byte, T_int, T_reference, T_proc, T_false, T_true;

//Operators
terminal T_eq_check, T_neq, T_lt, T_le, T_gt, T_ge, T_not, T_eq;

// Math operators
terminal T_plus, T_minus, T_div, T_times, T_mod;

// Logic operators
terminal T_and, T_or;

// Keywords
terminal T_if, T_else, T_return, T_while;

terminal String  T_id;
terminal Integer T_num;
terminal String  T_string;
terminal String  T_char;

non terminal Program prog;
non terminal Expr Expr;
non terminal Assignment Assignment;
non terminal FuncDef FuncDef;
non terminal VariableDef VariableDef;
non terminal LValue LValue;
non terminal LocalDef LocalDef;
non terminal Statement Stmt, StmtSemi, StmtBrace, SingleStmt, CompoundStmt;
non terminal ReturnStmt ReturnStmt;
non terminal IfStmt IfStmt, IfStmtSemi, IfStmtBrace, ElseStmt;
non terminal WhileStmt WhileStmt;
non terminal Cond Cond;
non terminal FuncParams FuncParams;
non terminal FuncCall FuncCall;
non terminal ExprList ExprList;
non terminal Type Type;
non terminal DataType DataType, RType;
non terminal Ops.Operator Ops;
non terminal Mops.Operator Mops, MathSign;
non terminal Lops.Operator Lops;
non terminal ConstInt Int_Const;
non terminal ConstChar Char_Const;
non terminal ConstString String_Const;
non terminal ConstBool Bool_Const;
precedence left T_plus, T_minus;
precedence left T_times, T_div, T_mod;
precedence left T_not, T_and, T_or;

precedence left  T_rbrace, T_semicolon, T_colon, T_comma;

start with prog;

prog ::=
      |  FuncDef:fd T_rbrace         {: RESULT = new Program(fd); :}
      ;

// Statements
Stmt ::= StmtSemi:s                           {: RESULT = s; :}
      | StmtBrace:s                           {: RESULT = s; :}
      | IfStmt:c                              {: RESULT = new Statement(c); :}
      | IfStmt:c Stmt:s                       {: RESULT = new Statement(c, s); :}
      | WhileStmt:w                           {: RESULT = new Statement(w); :}
      | WhileStmt:w Stmt:s                    {: RESULT = new Statement(w, s); :}
      ;
StmtSemi ::= StmtSemi:s T_semicolon Stmt:rs   {: RESULT = new Statement(s, rs); :}
          | StmtSemi:s T_semicolon            {: RESULT = s; :}
          | SingleStmt:s                      {: RESULT = s; :}
          ;
StmtBrace ::= StmtBrace:s T_rbrace Stmt:rs    {: RESULT = new Statement(s, rs); :}
           | CompoundStmt:cs                  {: RESULT = cs; :}
           ;
SingleStmt ::= Assignment:a       {: RESULT = new Statement(a); :}
            | FuncCall:f          {: RESULT = new Statement(f); :}
            | ReturnStmt:r        {: RESULT = new Statement(r); :}
            ;
CompoundStmt ::= T_lbrace Stmt:s      {: RESULT = new Statement(s); :}
              ;

IfStmt ::= T_if T_lpar Cond:c T_rpar IfStmtSemi:_if     {: RESULT = _if; _if.setCond(c);  :}
        | T_if T_lpar Cond:c T_rpar IfStmtBrace:_if     {: RESULT = _if; _if.setCond(c);  :}
        ;
IfStmtSemi ::= SingleStmt:s T_semicolon ElseStmt:_if    {: RESULT = new IfStmt(s, _if); :}
            | SingleStmt:s T_semicolon                  {: RESULT = new IfStmt(s); :}
            ;
IfStmtBrace ::= CompoundStmt:cs T_rbrace ElseStmt:_if   {: RESULT = new IfStmt(cs, _if); :}
            | CompoundStmt:cs T_rbrace                  {: RESULT = new IfStmt(cs); :}
            ;
ElseStmt ::= T_else IfStmt:_if                          {: RESULT = _if; :}
          | T_else SingleStmt:cs T_semicolon            {: RESULT = new IfStmt(cs); :}
          | T_else CompoundStmt:cs T_rbrace             {: RESULT = new IfStmt(cs); :}
          ;

WhileStmt ::= T_while T_lpar Cond:c T_rpar CompoundStmt:s T_rbrace          {: RESULT = new WhileStmt(c, s); :}
           ;
ReturnStmt ::= T_return Expr:e            {: RESULT = new ReturnStmt(e); :}
            | T_return                    {: RESULT = new ReturnStmt(null); :}
            ;

Expr ::= T_lpar Expr:e T_rpar             {: RESULT = e; :}
      | Expr:le Mops:op Expr:re           {: RESULT = new Mops(op, le, re); :}
      | MathSign:op Expr:e                {: RESULT = new Mops(op, e); :}
      | FuncCall:f                        {: RESULT = f; :}
      | LValue:v                          {: RESULT = v; :}
      | Int_Const:n                       {: RESULT = n; :}
      | Char_Const:c                      {: RESULT = c; :}
      | String_Const:s                    {: RESULT = s; :}
      ;

// Assignments
Assignment ::= LValue:lv T_eq Expr:e                    {: RESULT = new Assignment(lv, e); :}
            ;
LValue ::=  T_id:v T_lbracket Expr:e T_rbracket         {: RESULT = new LValue(v, e); :}
         |  T_id:v                                      {: RESULT = new LValue(v); :}
         ;
FuncDef ::= T_id:id T_lpar FuncParams:fp T_rpar T_colon RType:rt CompoundStmt:cs                   {: RESULT = new FuncDef(id, rt, cs, fp, null); :}
         | T_id:id T_lpar FuncParams:fp T_rpar T_colon RType:rt LocalDef:ld CompoundStmt:cs        {: RESULT = new FuncDef(id, rt, cs, fp, ld); :}
         | T_id:id T_lpar T_rpar T_colon RType:rt CompoundStmt:cs                                  {: RESULT = new FuncDef(id, rt, cs, null, null); :}
         | T_id:id T_lpar T_rpar T_colon RType:rt LocalDef:ld CompoundStmt:cs                      {: RESULT = new FuncDef(id, rt, cs, null, ld); :}
         ;
VariableDef ::= T_id:id T_colon DataType:t T_lbracket Int_Const:i T_rbracket {: t.setArray(i.getValue()); RESULT = new VariableDef(id, t); :}
             | T_id:id T_colon DataType:t                                    {: RESULT = new VariableDef(id, t); :}
             ;
LocalDef ::= FuncDef:f T_rbrace LocalDef:ld2        {: RESULT = new LocalDef(f, ld2); :}
          | FuncDef:f T_rbrace                      {: RESULT = new LocalDef(f, null); :}
          | VariableDef:v T_semicolon LocalDef:ld2  {: RESULT = new LocalDef(v, ld2); :}
          | VariableDef:v T_semicolon               {: RESULT = new LocalDef(v, null); :}
          ;

// Conditions
Cond ::= Expr:le Ops:op Expr:re          {: RESULT = new Cond(new Ops(op, le, re)); :}
      |  T_lpar Cond:c T_rpar            {: RESULT = c; :}
      |  T_not Cond:c                    {: RESULT = new Cond(new Lops(Lops.Operator.NOT, c, null)); :}
      |  Cond:lc Lops:op Cond:rc         {: RESULT = new Cond(new Lops(op, lc, rc)); :}
      |  Bool_Const:b                    {: RESULT = new Cond(b); :}
      ;

// Functions
FuncParams ::= T_id:id T_colon Type:t T_comma FuncParams:fp                {: RESULT = new FuncParams(id, t, false, fp); :}
             | T_id:id T_colon T_reference Type:t T_comma FuncParams:fp    {: RESULT = new FuncParams(id, t, true,  fp); :}
             | T_id:id T_colon Type:t                                      {: RESULT = new FuncParams(id, t, false); :}
             | T_id:id T_colon T_reference Type:t                          {: RESULT = new FuncParams(id, t, true);  :}
             ;

FuncCall ::= T_id:id T_lpar ExprList:el T_rpar  {: RESULT = new FuncCall(id, el); :}
          | T_id:id T_lpar T_rpar               {: RESULT = new FuncCall(id, null); :}
          ;
ExprList ::= Expr:e T_comma ExprList:el         {: RESULT = new ExprList(e, el); :}
           | Expr:e                             {: RESULT = new ExprList(e, null); :}
           ;

// Data Types
DataType ::= T_int                              {: RESULT = DataType.Int(); :}
      | T_byte                                  {: RESULT = DataType.Byte(); :}
      ;

RType ::= DataType:t                            {: RESULT = t; :}
      | T_proc                                  {: RESULT = DataType.Proc(); :}
      ;

Type ::= DataType:dt                            {: RESULT = dt; :}
      | DataType:dt T_lbracket T_rbracket       {: dt.setArray(0); RESULT = dt; :}
      ;

// Operators
Mops ::= T_plus                         {: RESULT = Mops.Operator.ADD; :}
      |  T_minus                        {: RESULT = Mops.Operator.SUB; :}
      |  T_times                        {: RESULT = Mops.Operator.MUL; :}
      |  T_div                          {: RESULT = Mops.Operator.DIV; :}
      |  T_mod                          {: RESULT = Mops.Operator.MOD; :}
      ;

Lops ::= T_and                          {: RESULT = Lops.Operator.AND; :}
      |  T_or                           {: RESULT = Lops.Operator.OR; :}
      ;

Ops  ::= T_eq_check                     {: RESULT = Ops.Operator.EQ; :}
      |  T_neq                          {: RESULT = Ops.Operator.NE; :}
      |  T_lt                           {: RESULT = Ops.Operator.LT; :}
      |  T_le                           {: RESULT = Ops.Operator.LE; :}
      |  T_gt                           {: RESULT = Ops.Operator.GT; :}
      |  T_ge                           {: RESULT = Ops.Operator.GE; :}
      ;

MathSign ::= T_plus                     {: RESULT = Mops.Operator.PLUS_SIGN; :}
      |  T_minus                        {: RESULT = Mops.Operator.MINUS_SIGN; :}
      ;

Int_Const ::= T_num:n                   {: RESULT = new ConstInt(n); :}
           ;

Char_Const ::= T_char:c                 {: RESULT = new ConstChar(c); :}
            ;

String_Const ::= T_string:s             {: RESULT = new ConstString(s); :}
              ;

Bool_Const ::= T_true                   {: RESULT = new ConstBool(true); :}
            | T_false                   {: RESULT = new ConstBool(false);:}
            ;
