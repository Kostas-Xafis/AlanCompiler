import java.util.*;
import java.io.*;
import gr.hua.dit.compiler.*;
import java_cup.runtime.Symbol;

parser code {:
//    public void report_error(String message, Object info) {
//        System.out.println("Error: " + message);
//        if (info == null) return ;Î£
//
//        String infoStr = info.toString();
//        if (infoStr.matches("#\\d+")) {
//            int sId = Integer.parseInt(infoStr.substring(1));
//            System.out.println("Error at Symbol: " + Symbols.terminalNames[sId]);
//        } else {
//            System.out.println("Info: " + info);
//        }
//    }
:}

// Delimiters
terminal T_lpar, T_rpar, T_lbrace, T_rbrace, T_lbracket, T_rbracket, T_comma, T_colon, T_semicolon;

//Types
terminal T_byte, T_int, T_reference, T_proc, T_false, T_true;

//Operators
terminal T_eq_check, T_neq, T_lt, T_le, T_gt, T_ge, T_not, T_eq;

// Math operators
terminal T_plus, T_minus, T_div, T_times, T_mod;

// Logic operators
terminal T_and, T_or;

// Keywords
terminal T_if, T_else, T_return, T_while;

terminal String  T_id;
terminal Integer T_num;
terminal String  T_string;
terminal String  T_char;

non terminal AST prog;
non terminal AST Expr;
non terminal AST Assignment, FuncDef, VariableDef, LValue, LocalDef;
non terminal AST Stmt, StmtSemi, StmtBrace, SingleStmt, WhileStmt, CompoundStmt, ReturnStmt, Cond;
non terminal AST IfStmt, IfStmtSemi, IfStmtBrace, ElseStmt;
non terminal AST FuncParams, FuncCall, ExprList;
non terminal AST Type, DataType, RType;
non terminal AST Ops, Mops, Lops, MathSign;
non terminal AST Int_Const, Char_Const, String_Const;

precedence left T_plus, T_minus;
precedence left T_times, T_div, T_mod;
precedence left T_not, T_and, T_or;

precedence left  T_rbrace, T_semicolon, T_colon, T_comma;

start with prog;

prog ::=
      |  FuncDef:fd T_rbrace         {: RESULT = fd; :}
      ;

// Statements
Stmt ::= StmtSemi:s                           {: RESULT = s; :}
      | StmtBrace:s                           {: RESULT = s; :}
      | IfStmt:c                              {: RESULT = c; :}
      | IfStmt:c Stmt:s                       {: RESULT = new AST("Stmt", null, c, s); :}
      | WhileStmt:w                           {: RESULT = w; :}
      | WhileStmt:w Stmt:s                    {: RESULT = new AST("Stmt", null, w, s); :}
      ;
StmtSemi ::= StmtSemi:s T_semicolon Stmt:rs   {: RESULT = new AST("Stmt", null, s, rs); :}
          | StmtSemi:s T_semicolon            {: RESULT = s; :}
          | Assignment:a                      {: RESULT = a; :}
          | FuncCall:f                        {: RESULT = f; :}
          | ReturnStmt:r                      {: RESULT = r; :}
          ;
StmtBrace ::= StmtBrace:s T_rbrace Stmt:rs    {: RESULT = new AST("Stmt", null, s, rs); :}
           | CompoundStmt:cs                  {: RESULT = cs; :}
           ;

SingleStmt ::= Assignment:a       {: RESULT = a; :}
            | FuncCall:f          {: RESULT = f; :}
            | ReturnStmt:r        {: RESULT = r; :}
            ;
CompoundStmt ::= T_lbrace Stmt:s      {: RESULT = new AST("CompoundStmt", null, s); :}
              ;

IfStmt ::= T_if T_lpar Cond:c T_rpar IfStmtSemi:_if     {: RESULT = new AST("IfStmtSemi", "if", c, _if); :}
        | T_if T_lpar Cond:c T_rpar IfStmtBrace:_if     {: RESULT = new AST("IfStmtBrace", "if", c, _if); :}
        ;
IfStmtSemi ::= SingleStmt:s T_semicolon ElseStmt:_if    {: RESULT = new AST("IfStmt", "else", s, _if); :}
            | SingleStmt:s T_semicolon                  {: RESULT = s; :}
            ;
IfStmtBrace ::= CompoundStmt:cs T_rbrace ElseStmt:_if   {: RESULT = new AST("IfStmt", "else", cs, _if); :}
            | CompoundStmt:cs T_rbrace                  {: RESULT = cs; :}
            ;
ElseStmt ::= T_else IfStmt:_if                          {: RESULT = _if; :}
          | T_else SingleStmt:cs T_semicolon            {: RESULT = new AST("IfStmt", "else", cs); :}
          | T_else CompoundStmt:cs T_rbrace             {: RESULT = new AST("IfStmt", "else", cs); :}
          ;

WhileStmt ::= T_while T_lpar Cond:c T_rpar CompoundStmt:s T_rbrace          {: RESULT = new AST("WhileStmt", null, c, s); :}
           ;
ReturnStmt ::= T_return Expr:e            {: RESULT = new AST("Return", null, e); :}
            | T_return                    {: RESULT = new AST("Return", null); :}
            ;

Expr ::= T_lpar Expr:e T_rpar             {: RESULT = e; :}
      | Expr:le Mops:op Expr:re           {: RESULT = new AST("Expr", null, new AST("Expr", null, le, op), re); :}
      | MathSign:op Expr:e                {: RESULT = new AST("Expr", null, op, e); :}
      | FuncCall:f                        {: RESULT = f; :}
      | LValue:v                          {: RESULT = v; :}
      | Int_Const:n                       {: RESULT = n; :}
      | Char_Const:c                      {: RESULT = c; :}
      ;

// Assignments
Assignment ::= LValue:lv T_eq Expr:e                    {: RESULT = new AST("Assignment", null, lv, e); :}
            ;
LValue ::=  T_id:v T_lbracket Expr:e T_rbracket         {: RESULT = new AST("LValue", v, e, null); :}
         |  T_id:v                                      {: RESULT = new AST("LValue", v); :}
         |  String_Const:s                              {: RESULT = s; :}
         ;
FuncDef ::= T_id:id T_lpar FuncParams:fp T_rpar T_colon RType:rt CompoundStmt:cs                   {: RESULT = new AST("FuncDef", id, new AST("FuncParts", null, fp, rt), cs); :}
         | T_id:id T_lpar FuncParams:fp T_rpar T_colon RType:rt LocalDef:ld CompoundStmt:cs        {: RESULT = new AST("FuncDef", id, new AST("FuncParts", null, fp, rt), new AST("FuncParts", null, ld, cs)); :}
         | T_id:id T_lpar T_rpar T_colon RType:rt CompoundStmt:cs                                  {: RESULT = new AST("FuncDef", id, rt, cs); :}
         | T_id:id T_lpar T_rpar T_colon RType:rt LocalDef:ld CompoundStmt:cs                      {: RESULT = new AST("FuncDef", id, new AST("FuncParts", null, rt, ld), cs); :}
         ;
VariableDef ::= T_id:id T_colon DataType:t T_lbracket Int_Const:i T_rbracket {: RESULT = new AST("VariableDef", id, t, i); :}
             | T_id:id T_colon DataType:t                                    {: RESULT = new AST("VariableDef", id, t); :}
             ;
LocalDef ::= FuncDef:f T_rbrace LocalDef:ld2        {: RESULT = new AST("LocalDef", null, f, ld2); :}
          | FuncDef:f T_rbrace                      {: RESULT = new AST("LocalDef", null, f); :}
          | VariableDef:v T_semicolon LocalDef:ld2  {: RESULT = new AST("LocalDef", null, v, ld2); :}
          | VariableDef:v T_semicolon               {: RESULT = new AST("LocalDef", null, v); :}
          ;

// Conditions
Cond ::= Expr:le Ops:op Expr:re          {: RESULT = new AST("CondOp", null, new AST("CondOp", null, le, op), re); :}
      |  T_lpar Cond:c T_rpar            {: RESULT = c; :}
      |  T_not Cond:c                    {: RESULT = new AST("CondOp", null, new AST("Lops", "!"), c); :}
      |  Cond:lc Lops:op Cond:rc         {: RESULT = new AST("CondOp", null, new AST("CondOp", null, lc, op), rc); :}
      |  T_true                          {: RESULT = new AST("Boolean", true); :}
      |  T_false                         {: RESULT = new AST("Boolean", false); :}
      ;

// Functions
FuncParams ::= T_id:id T_colon Type:t T_comma FuncParams:fp                {: RESULT = new AST("FuncParams", id, t, fp); :}
             | T_id:id T_colon T_reference Type:t T_comma FuncParams:fp    {: RESULT = new AST("FuncParams", id, new AST("Reference", null, t), fp); :}
             | T_id:id T_colon Type:t                                      {: RESULT = new AST("FuncParams", id, t); :}
             | T_id:id T_colon T_reference Type:t                          {: RESULT = new AST("FuncParams", id, new AST("Reference", null, t)); :}
             ;
FuncCall ::= T_id:id T_lpar ExprList:el T_rpar  {: RESULT = new AST("FuncCall", id, el); :}
          | T_id:id T_lpar T_rpar               {: RESULT = new AST("FuncCall", id); :}
          ;
ExprList ::= Expr:e T_comma ExprList:el         {: RESULT = new AST("ExprList", null, e, el); :}
           | Expr:e                             {: RESULT = new AST("ExprList", null, e); :}
           ;

// Data Types
DataType ::= T_int                              {: RESULT = new AST("DataType", "int"); :}
      | T_byte                                  {: RESULT = new AST("DataType", "byte"); :}
      ;

RType ::= DataType:t                            {: RESULT = t; :}
      | T_proc                                  {: RESULT = new AST("DataType", "proc"); :}
      ;

Type ::= DataType:dt                            {: RESULT = dt; :}
      | DataType:dt T_lbracket T_rbracket       {: AST r = new AST("DataType"); r.addChildren(dt, new AST("Array", null)); RESULT = r; :}
      ;

// Operators
Mops ::= T_plus                         {: RESULT = new AST("Mops", "+"); :}
      |  T_minus                        {: RESULT = new AST("Mops", "-"); :}
      |  T_times                        {: RESULT = new AST("Mops", "*"); :}
      |  T_div                          {: RESULT = new AST("Mops", "/"); :}
      |  T_mod                          {: RESULT = new AST("Mops", "%"); :}
      ;

Lops ::= T_and                          {: RESULT = new AST("Lops", "&"); :}
      |  T_or                           {: RESULT = new AST("Lops", "|"); :}
      ;
Ops  ::= T_eq_check                     {: RESULT = new AST("Ops", "=="); :}
      |  T_neq                          {: RESULT = new AST("Ops", "!="); :}
      |  T_lt                           {: RESULT = new AST("Ops", "<"); :}
      |  T_le                           {: RESULT = new AST("Ops", "<="); :}
      |  T_gt                           {: RESULT = new AST("Ops", ">"); :}
      |  T_ge                           {: RESULT = new AST("Ops", ">="); :}
      ;

MathSign ::= T_plus                     {: RESULT = new AST("MathSign", "+"); :}
      |  T_minus                        {: RESULT = new AST("MathSign", "-"); :}
      ;

Int_Const ::= T_num:n                   {: RESULT = new AST("Int", n); :}
           ;

Char_Const ::= T_char:c                 {: RESULT = new AST("Char", c); :}
            ;

String_Const ::= T_string:s             {: RESULT = new AST("String", s); :}
              ;

